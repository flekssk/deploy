---
# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  locale: 'ru'
  env: '%env(APP_ENV)%'

services:
  # default configuration for services in *this* file
  _defaults:
    # Automatically injects dependencies in your services.
    autowire: true
    # Automatically registers your services as commands, event subscribers, etc.
    autoconfigure: true
    # Allows optimizing the container by removing unused services; this also means
    # fetching services directly from the container via $container->get() won't work.
    # The best practice is to be explicit about your dependencies anyway.
    public: false

  Action\Logger\ActionProcessor:
    tags:
      - {name: monolog.processor}

  Symfony\Component\HttpFoundation\Session\Storage\Handler\RedisSessionHandler:
    arguments:
      - '@Redis'

  Action\Logger\ActionFormatter: ~

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude:
      - '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
      - '../src/Domain/Entity'
      - '../src/Application/**/Dto'
      - '../src/Infrastructure/**/Dto'
      - '../src/Infrastructure/GitLab/Drivers/M4tthumphrey/Api'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\UI\Controller\:
    resource: '../src/UI/Controller'
    tags: ['controller.service_arguments']

  App\Application\EventListener\HttpApiExceptionListener:
     tags:
      - {name: kernel.event_listener, event: kernel.exception}

  App\Domain\Repository\Project\ProjectRepositoryInterface:
      public: true
      class: App\Infrastructure\Persistence\Doctrine\Repository\Project\ProjectRepository

  App\Domain\Entity\Client\Factory\ClientFactoryInterface:
    class: App\Domain\Entity\Client\Factory\ClientFactory
  kernel.event_listener.json_request_transformer:
    class: Qandidate\Common\Symfony\HttpKernel\EventListener\JsonRequestTransformerListener
    tags:
      - {name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 100}
  JWTTokenAuthenticator:
    class: Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator
  Action\Id2User\Id2ClientInterface:
    class: Action\Id2User\Id2Client
    arguments:
      - '%env(ID2_DOMAIN)%'
      - '%env(APP_ID)%'
      - '%env(APP_ID_SECRET_KEY)%'
  App\Infrastructure\AuthToken\AuthTokenGeneratorInterface:
    public: true
    class: App\Infrastructure\AuthToken\JwtAuthTokenGenerator
  App\Domain\EventDispatcher\ListenerProviderInterface:
    class: App\Infrastructure\EventDispatcher\ListenerProvider
  App\Domain\EventDispatcher\EventDispatcherInterface:
    class: App\Infrastructure\EventDispatcher\EventDispatcher
  GuzzleHttp\ClientInterface:
    class: GuzzleHttp\Client
#    GItlab config
  App\Infrastructure\Pipeline\GitApi\Commands\:
      resource: '../src/Infrastructure/Pipeline/GitApi/Commands/*'
      public: true
  App\Infrastructure\GitLab\GitApiInterface:
    class: App\Infrastructure\GitLab\Drivers\M4tthumphrey\GitLabApiService
    arguments:
        - '%env(GITLAB_URL)%'
        - '%env(GITLAB_TOKEN)%'
